CCS PCM C Compiler, Version 3.241, 31752               30-Dec-06 14:51

               Filename: main.lst

               ROM used: 690 words (8%)
                         Largest free fragment is 2048
               RAM used: 11 (6%) at main() level
                         18 (10%) worst case
               Stack:    2 locations

*
0000:  MOVLW  00
0001:  MOVWF  0A
0002:  GOTO   17D
0003:  NOP
.................... #include "cereb104.h" 
.................... #include <16F877.h> 
.................... //////// Standard Header file for the PIC16F877 device //////////////// 
.................... #device PIC16F877 
.................... #list 
....................  
.................... #fuses HS, NOWDT 
.................... #use delay (clock = 20000000) 
*
0090:  MOVLW  26
0091:  MOVWF  04
0092:  MOVF   00,W
0093:  BTFSC  03.2
0094:  GOTO   0A2
0095:  MOVLW  06
0096:  MOVWF  78
0097:  CLRF   77
0098:  DECFSZ 77,F
0099:  GOTO   098
009A:  DECFSZ 78,F
009B:  GOTO   097
009C:  MOVLW  7B
009D:  MOVWF  77
009E:  DECFSZ 77,F
009F:  GOTO   09E
00A0:  DECFSZ 00,F
00A1:  GOTO   095
00A2:  RETLW  00
00A3:  MOVLW  03
00A4:  SUBWF  2A,F
00A5:  BTFSS  03.0
00A6:  GOTO   0B1
00A7:  MOVLW  2A
00A8:  MOVWF  04
00A9:  MOVF   00,W
00AA:  BTFSC  03.2
00AB:  GOTO   0B1
00AC:  GOTO   0AF
00AD:  NOP
00AE:  NOP
00AF:  DECFSZ 00,F
00B0:  GOTO   0AD
00B1:  RETLW  00
.................... #use rs232(baud=115200, parity=N, bits=8, xmit=PIN_C6, rcv=PIN_C7) 
....................  
.................... #include <cereb104-pinout.h> 
.................... // for LEDs 
.................... #define YELLOW_LED_PIN PIN_B2 
.................... #define GREEN_LED_PIN  PIN_B0 
....................  
.................... // for buttons 
.................... #define BTN_A_PIN PIN_B4 
.................... #define BTN_B_PIN PIN_B5 
....................  
.................... #include <cereb10-pwm.h> 
.................... /* 
....................   3/20/04 PWM routine for Cereb 1.00 - 1.04 + 
....................   by bkirby 
....................  
....................   ****************** 
....................   Primary functions: 
....................   ****************** 
....................   pwm_init() 
....................   set_pwm(int which, signed long int open_velocity) 
....................   set_pwms(signed long int open_velocity1, signed long int open_velocity2) 
....................  
....................  
....................   ********************* 
....................   Function Descriptions 
....................   ********************* 
....................  
....................   pwm_init(): 
....................     Call this once before attempting to use either set_pwm or set_pwms.   
....................     Usually called at the beginning of your main() loop. 
....................    
....................   set_pwm(), set_pwms(): 
....................  
....................     int which:  
....................              'which' may either be 0 or 1.  You may also use  
....................              MOTOR_1 and MOTOR_2, as I have defined them. 
....................  
....................     signed long int open_velocity:  
....................              a value in the range -1023 <-> 1023. 
.................... 	     -1023 is full reverse, 0 is off, 1023 is full forward. 
.................... 	     Anything great in absolute value than 1023 will be truncated. 
....................        
....................   set_pwm() allows you to set one motor direction/duty cycle at a time. 
....................   set_pwms() sets both motors dir/duty cycle simultaneously. 
....................  
.................... */ 
....................  
.................... #define H_DIR1B PIN_C0 
.................... #define H_DIR1A PIN_A4 
....................  
.................... #define H_DIR2B PIN_C5 
.................... #define H_DIR2A PIN_B1 
....................  
.................... #define H_MAX_SPEED 1023 
....................  
.................... #define MOTOR_1 0 
.................... #define MOTOR_2 1 
....................  
.................... inline void set_hbridge_backward(int which) 
.................... { 
....................   if(which == MOTOR_1) 
....................     { 
....................       output_low(H_DIR1A); 
....................       output_high(H_DIR1B); 
*
018D:  MOVLW  FF
018E:  BCF    03.5
018F:  MOVWF  20
....................     } 
....................   else 
....................     { 
....................       output_low(H_DIR2A); 
....................       output_high(H_DIR2B); 
....................     } 
.................... } 
....................  
.................... inline void set_hbridge_forward(int which) 
.................... { 
....................   if(which == MOTOR_1) 
....................     { 
....................       output_high(H_DIR1A); 
....................       output_low(H_DIR1B); 
....................     } 
....................   else 
....................     { 
....................       output_high(H_DIR2A); 
....................       output_low(H_DIR2B); 
....................     } 
.................... } 
....................  
.................... inline void set_hbridge_speed(int which, long int spd) 
.................... { 
....................   if(spd > H_MAX_SPEED) 
*
0025:  MOVF   2C,W
0026:  SUBLW  03
0027:  BTFSC  03.0
0028:  GOTO   02D
*
005D:  MOVF   2C,W
005E:  SUBLW  03
005F:  BTFSC  03.0
0060:  GOTO   065
....................     spd = H_MAX_SPEED; 
*
0029:  MOVLW  03
002A:  MOVWF  2C
002B:  MOVLW  FF
002C:  MOVWF  2B
*
0061:  MOVLW  03
0062:  MOVWF  2C
0063:  MOVLW  FF
0064:  MOVWF  2B
....................  
....................   if(which == MOTOR_1) 
*
002D:  MOVF   2A,F
002E:  BTFSS  03.2
002F:  GOTO   044
*
0065:  MOVF   2A,F
0066:  BTFSS  03.2
0067:  GOTO   07C
....................     { 
....................       set_pwm1_duty(spd); 
*
0030:  MOVF   2C,W
0031:  MOVWF  79
0032:  MOVF   2B,W
0033:  MOVWF  78
0034:  RRF    79,F
0035:  RRF    78,F
0036:  RRF    79,F
0037:  RRF    78,F
0038:  RRF    79,F
0039:  MOVF   78,W
003A:  MOVWF  15
003B:  RRF    79,F
003C:  RRF    79,W
003D:  ANDLW  30
003E:  MOVWF  77
003F:  MOVF   17,W
0040:  ANDLW  CF
0041:  IORWF  77,W
0042:  MOVWF  17
*
0068:  MOVF   2C,W
0069:  MOVWF  79
006A:  MOVF   2B,W
006B:  MOVWF  78
006C:  RRF    79,F
006D:  RRF    78,F
006E:  RRF    79,F
006F:  RRF    78,F
0070:  RRF    79,F
0071:  MOVF   78,W
0072:  MOVWF  15
0073:  RRF    79,F
0074:  RRF    79,W
0075:  ANDLW  30
0076:  MOVWF  77
0077:  MOVF   17,W
0078:  ANDLW  CF
0079:  IORWF  77,W
007A:  MOVWF  17
....................     } 
....................   else 
*
0043:  GOTO   057
*
007B:  GOTO   08F
....................     { 
....................       set_pwm2_duty(spd); 
*
0044:  MOVF   2C,W
0045:  MOVWF  79
0046:  MOVF   2B,W
0047:  MOVWF  78
0048:  RRF    79,F
0049:  RRF    78,F
004A:  RRF    79,F
004B:  RRF    78,F
004C:  RRF    79,F
004D:  MOVF   78,W
004E:  MOVWF  1B
004F:  RRF    79,F
0050:  RRF    79,W
0051:  ANDLW  30
0052:  MOVWF  77
0053:  MOVF   1D,W
0054:  ANDLW  CF
0055:  IORWF  77,W
0056:  MOVWF  1D
*
007C:  MOVF   2C,W
007D:  MOVWF  79
007E:  MOVF   2B,W
007F:  MOVWF  78
0080:  RRF    79,F
0081:  RRF    78,F
0082:  RRF    79,F
0083:  RRF    78,F
0084:  RRF    79,F
0085:  MOVF   78,W
0086:  MOVWF  1B
0087:  RRF    79,F
0088:  RRF    79,W
0089:  ANDLW  30
008A:  MOVWF  77
008B:  MOVF   1D,W
008C:  ANDLW  CF
008D:  IORWF  77,W
008E:  MOVWF  1D
....................     } 
.................... } 
....................  
.................... void set_hbridge_speeds(long int spd1, long int spd2) 
.................... { 
....................   set_hbridge_speed(MOTOR_1, spd1); 
*
0020:  CLRF   2A
0021:  MOVF   27,W
0022:  MOVWF  2C
0023:  MOVF   26,W
0024:  MOVWF  2B
....................   set_hbridge_speed(MOTOR_2, spd2); 
*
0057:  MOVLW  01
0058:  MOVWF  2A
0059:  MOVF   29,W
005A:  MOVWF  2C
005B:  MOVF   28,W
005C:  MOVWF  2B
.................... } 
....................  
.................... void set_hbridge_duty(int which, signed long int v) 
.................... { 
....................   if(v > 0) 
....................     { 
....................       set_hbridge_forward(which); 
....................     } 
....................   else 
....................     { 
....................       v *= -1; 
....................  
....................       set_hbridge_backward(which); 
....................     } 
....................  
....................   set_hbridge_speed(which, v); 
.................... } 
....................  
.................... inline void set_hbridge_duties(signed long int v1, signed long int v2) 
.................... { 
....................   set_hbridge_duty(MOTOR_1, v1); 
....................   set_hbridge_duty(MOTOR_2, v2); 
.................... } 
....................  
.................... void pwm_init() 
.................... { 
....................   setup_ccp1(CCP_PWM); 
*
0004:  BCF    20.2
0005:  MOVF   20,W
0006:  BSF    03.5
0007:  MOVWF  07
0008:  BCF    03.5
0009:  BCF    07.2
000A:  MOVLW  0C
000B:  MOVWF  17
....................   setup_ccp2(CCP_PWM); 
000C:  BCF    20.1
000D:  MOVF   20,W
000E:  BSF    03.5
000F:  MOVWF  07
0010:  BCF    03.5
0011:  BCF    07.1
0012:  MOVLW  0C
0013:  MOVWF  1D
....................   setup_timer_2(T2_DIV_BY_1, 255, 1); 
0014:  MOVLW  00
0015:  MOVWF  78
0016:  IORLW  04
0017:  MOVWF  12
0018:  MOVLW  FF
0019:  BSF    03.5
001A:  MOVWF  12
....................  
....................   set_hbridge_speeds(0,0); 
001B:  BCF    03.5
001C:  CLRF   27
001D:  CLRF   26
001E:  CLRF   29
001F:  CLRF   28
.................... } 
*
008F:  RETLW  00
....................  
.................... #define set_pwm(x,y) set_hbridge_duty(x,y) 
.................... #define set_pwms(x,y) set_hbridge_duties(x,y) 
....................  
.................... #include <cereb10-adc.h> 
.................... /* 
....................   This sets the setup time on the ADC.  For most low impedance 
....................   loads, 10 us is fine.  Only alter if you experience problems. 
.................... */ 
.................... #define CEREB_10_ANALOG_READ_DELAY 10 
....................  
.................... inline void analog_init() 
.................... { 
....................   setup_adc_ports(ALL_ANALOG); 
*
0198:  BSF    03.5
0199:  BCF    1F.0
019A:  BCF    1F.1
019B:  BCF    1F.2
019C:  BCF    1F.3
....................   setup_adc(ADC_CLOCK_INTERNAL); 
019D:  BCF    03.5
019E:  BSF    1F.6
019F:  BSF    1F.7
01A0:  BSF    03.5
01A1:  BCF    1F.7
01A2:  BCF    03.5
01A3:  BSF    1F.0
.................... } 
....................  
.................... /* 
....................   Refer to the 16f877.h file and PIC manual for proper definitions 
.................... */ 
.................... void analog_custom_init(byte ports, byte clock) 
.................... { 
....................   //setup_adc_ports(ports); 
....................   //setup_adc(clock); 
....................   #define analog_custom_init(__PORTS,__CLOCK) setup_adc_ports(__PORTS) setup_adc(__CLOCK); 
.................... } 
....................  
.................... /* 
....................   Returns 0-255, 0 -> 0V, 255 -> 5V (with standard 5V reference) 
....................  
.................... */ 
.................... unsigned int analog(int channel) 
.................... { 
....................   set_adc_channel(channel); 
*
00C9:  RLF    25,W
00CA:  MOVWF  77
00CB:  RLF    77,F
00CC:  RLF    77,F
00CD:  MOVLW  F8
00CE:  ANDWF  77,F
00CF:  MOVF   1F,W
00D0:  ANDLW  C7
00D1:  IORWF  77,W
00D2:  MOVWF  1F
....................   delay_us(CEREB_10_ANALOG_READ_DELAY); 
00D3:  MOVLW  10
00D4:  MOVWF  77
00D5:  DECFSZ 77,F
00D6:  GOTO   0D5
00D7:  NOP
....................   return read_adc(); 
00D8:  BSF    1F.2
00D9:  BTFSC  1F.2
00DA:  GOTO   0D9
00DB:  MOVF   1E,W
00DC:  MOVWF  78
.................... } 
00DD:  RETLW  00
....................  
....................  
.................... /* 
....................   OPTION FLAGS for cereb_init() 
....................  
.................... DISABLE_ANALOG - does not call analog_init() 
.................... DISABLE_PWM    - does not call pwm_init() 
.................... */ 
.................... #define DISABLE_ANALOG 0x01 
.................... #define DISABLE_PWM    0x02 
....................  
.................... // for LEDs 
.................... #define YELLOW 1 
.................... #define GREEN 0 
....................  
.................... // for buttons 
.................... #define BTN_A 0 
.................... #define BTN_B 1 
....................  
.................... // ADC ports 
....................  
.................... #define A0 0 
.................... #define A1 1 
.................... #define A2 2 
.................... #define A3 3 
.................... #define A5 4 
.................... #define E0 5 
.................... #define E1 6 
.................... #define E2 7 
....................  
.................... // turn a specified(0 or 1) LED on. 
.................... void set_led(int which, int value) 
.................... { 
....................   if(which == GREEN) 
*
00B2:  MOVF   25,F
00B3:  BTFSS  03.2
00B4:  GOTO   0BF
....................     { 
....................       output_bit(GREEN_LED_PIN, value); 
00B5:  MOVF   26,F
00B6:  BTFSS  03.2
00B7:  GOTO   0BA
00B8:  BCF    06.0
00B9:  GOTO   0BB
00BA:  BSF    06.0
00BB:  BSF    03.5
00BC:  BCF    06.0
....................     } 
....................   else 
00BD:  GOTO   0C7
00BE:  BCF    03.5
....................     { 
....................       output_bit(YELLOW_LED_PIN, value); 
00BF:  MOVF   26,F
00C0:  BTFSS  03.2
00C1:  GOTO   0C4
00C2:  BCF    06.2
00C3:  GOTO   0C5
00C4:  BSF    06.2
00C5:  BSF    03.5
00C6:  BCF    06.2
....................     } 
....................  
.................... } 
00C7:  BCF    03.5
00C8:  RETLW  00
....................  
.................... #define LEDon(x) set_led(x, 1) 
.................... #define LEDoff(x) set_led(x, 0) 
....................  
.................... int button(int which) 
.................... { 
....................    if(which == BTN_A) 
....................      { 
.................... 	return input(BTN_A_PIN); 
....................      } 
....................    else 
....................      { 
.................... 	return input(BTN_B_PIN); 
....................      } 
.................... } 
....................  
.................... inline void waitforbutton(int which) 
.................... { 
....................   while(!button(which)) 
....................     { 
....................       delay_ms(10); 
....................     } 
.................... } 
....................  
.................... /* 
....................   To add: 
....................  
....................   flags so you can cereb_init(BLAH | BLAH | BLAH); to turn off various things, 
....................   maybe enable special options(like analog settings). 
....................  
.................... */ 
.................... inline void cereb_init(int flags) 
.................... { 
....................   if(!(flags & DISABLE_ANALOG)) 
*
0196:  BTFSC  25.0
0197:  GOTO   1A4
....................     { 
....................       analog_init(); 
....................     } 
....................  
....................   if(!(flags & DISABLE_PWM)) 
*
01A4:  BTFSC  25.1
01A5:  GOTO   1A7
....................     { 
....................       pwm_init(); 
01A6:  CALL   004
....................     } 
....................  
....................   enable_interrupts(GLOBAL); 
01A7:  MOVLW  C0
01A8:  IORWF  0B,F
....................   delay_ms(1); 
01A9:  MOVLW  01
01AA:  MOVWF  26
01AB:  CALL   090
.................... } 
....................  
.................... #include "Utilities.h" 
.................... //left -> counterclockwise=forward= 1100 
.................... //right -> clockwise = forward = 1900 
....................  
....................  
.................... inline void servoLeft()//slow left turn 
.................... 	{ 
.................... 	output_bit(PIN_D0, 1);//139 center 
*
025A:  BSF    08.0
025B:  BSF    03.5
025C:  BCF    08.0
.................... 	delay_us(1400); 
025D:  MOVLW  01
025E:  BCF    03.5
025F:  MOVWF  26
0260:  CALL   090
0261:  MOVLW  02
0262:  MOVWF  25
0263:  MOVLW  C7
0264:  MOVWF  2A
0265:  CALL   0A3
0266:  DECFSZ 25,F
0267:  GOTO   263
.................... 	output_bit(PIN_D0, 0); 
0268:  BCF    08.0
0269:  BSF    03.5
026A:  BCF    08.0
....................  
.................... 	output_bit(PIN_D1, 1);//139 center 
026B:  BCF    03.5
026C:  BSF    08.1
026D:  BSF    03.5
026E:  BCF    08.1
.................... 	delay_us(1800); 
026F:  MOVLW  01
0270:  BCF    03.5
0271:  MOVWF  26
0272:  CALL   090
0273:  MOVLW  04
0274:  MOVWF  25
0275:  MOVLW  C7
0276:  MOVWF  2A
0277:  CALL   0A3
0278:  DECFSZ 25,F
0279:  GOTO   275
.................... 	output_bit(PIN_D1, 0); 
027A:  BCF    08.1
027B:  BSF    03.5
027C:  BCF    08.1
.................... 	} 
....................  
.................... inline void servoRight()//fast right turn 
.................... 	{ 
.................... 	output_bit(PIN_D0, 1);//139 center 
*
0222:  BSF    08.0
0223:  BSF    03.5
0224:  BCF    08.0
.................... 	delay_us(1100); 
0225:  MOVLW  01
0226:  BCF    03.5
0227:  MOVWF  26
0228:  CALL   090
0229:  MOVLW  64
022A:  MOVWF  2A
022B:  CALL   0A3
.................... 	output_bit(PIN_D0, 0); 
022C:  BCF    08.0
022D:  BSF    03.5
022E:  BCF    08.0
....................  
.................... 	output_bit(PIN_D1, 1);//139 center 
022F:  BCF    03.5
0230:  BSF    08.1
0231:  BSF    03.5
0232:  BCF    08.1
.................... 	delay_us(1300); 
0233:  MOVLW  01
0234:  BCF    03.5
0235:  MOVWF  26
0236:  CALL   090
0237:  MOVLW  02
0238:  MOVWF  25
0239:  MOVLW  95
023A:  MOVWF  2A
023B:  CALL   0A3
023C:  DECFSZ 25,F
023D:  GOTO   239
.................... 	output_bit(PIN_D1, 0); 
023E:  BCF    08.1
023F:  BSF    03.5
0240:  BCF    08.1
.................... 	} 
....................  
.................... inline void servoForward()//go forward 
.................... 	{ 
.................... 	output_bit(PIN_D0, 1);//139 center 
*
028A:  BSF    08.0
028B:  BSF    03.5
028C:  BCF    08.0
.................... 	delay_us(1000); 
028D:  MOVLW  01
028E:  BCF    03.5
028F:  MOVWF  26
0290:  CALL   090
.................... 	output_bit(PIN_D0, 0); 
0291:  BCF    08.0
0292:  BSF    03.5
0293:  BCF    08.0
....................  
.................... 	output_bit(PIN_D1, 1);//139 center 
0294:  BCF    03.5
0295:  BSF    08.1
0296:  BSF    03.5
0297:  BCF    08.1
.................... 	delay_us(1900); 
0298:  MOVLW  01
0299:  BCF    03.5
029A:  MOVWF  26
029B:  CALL   090
029C:  MOVLW  04
029D:  MOVWF  25
029E:  MOVLW  E0
029F:  MOVWF  2A
02A0:  CALL   0A3
02A1:  DECFSZ 25,F
02A2:  GOTO   29E
.................... 	output_bit(PIN_D1, 0); 
02A3:  BCF    08.1
02A4:  BSF    03.5
02A5:  BCF    08.1
.................... 	} 
.................... 	 
.................... inline void servoReverse()//go forward 
.................... 	{ 
.................... 	int i=250; 
*
01EA:  MOVLW  FA
01EB:  MOVWF  25
.................... 	while (i>0) 
.................... 		{ 
01EC:  MOVF   25,F
01ED:  BTFSC  03.2
01EE:  GOTO   20E
.................... 		output_bit(PIN_D0, 1);//139 center 
01EF:  BSF    08.0
01F0:  BSF    03.5
01F1:  BCF    08.0
.................... 		delay_us(1900); 
01F2:  MOVLW  01
01F3:  BCF    03.5
01F4:  MOVWF  26
01F5:  CALL   090
01F6:  MOVLW  04
01F7:  MOVWF  26
01F8:  MOVLW  E0
01F9:  MOVWF  2A
01FA:  CALL   0A3
01FB:  DECFSZ 26,F
01FC:  GOTO   1F8
.................... 		output_bit(PIN_D0, 0); 
01FD:  BCF    08.0
01FE:  BSF    03.5
01FF:  BCF    08.0
.................... 	 
.................... 		output_bit(PIN_D1, 1);//139 center 
0200:  BCF    03.5
0201:  BSF    08.1
0202:  BSF    03.5
0203:  BCF    08.1
.................... 		delay_us(1000); 
0204:  MOVLW  01
0205:  BCF    03.5
0206:  MOVWF  26
0207:  CALL   090
.................... 		output_bit(PIN_D1, 0); 
0208:  BCF    08.1
0209:  BSF    03.5
020A:  BCF    08.1
.................... 		 
.................... 		i--; 
020B:  BCF    03.5
020C:  DECF   25,F
.................... 		} 
020D:  GOTO   1EC
.................... 	} 
....................  
.................... inline void ScanRight() 
.................... 	{ 
.................... 	int i=3; 
.................... 	 
.................... 	while(i>0) 
.................... 		{ 
.................... 		output_bit(PIN_D2, 1);//139 center 
.................... 		delay_us(1500); 
.................... 		output_bit(PIN_D2, 0); 
.................... 		delay_us(2000); 
.................... 		i--; 
.................... 		} 
.................... 	} 
....................  
.................... inline void ScanLeft() 
.................... 	{ 
.................... 	int i=3; 
*
01B0:  MOVLW  03
01B1:  MOVWF  25
.................... 	 
.................... 	while(i>0) 
.................... 		{ 
01B2:  MOVF   25,F
01B3:  BTFSC  03.2
01B4:  GOTO   1C9
.................... 		output_bit(PIN_D2, 1);//139 center 
01B5:  BSF    08.2
01B6:  BSF    03.5
01B7:  BCF    08.2
.................... 		delay_us(900); 
01B8:  MOVLW  04
01B9:  BCF    03.5
01BA:  MOVWF  26
01BB:  MOVLW  E0
01BC:  MOVWF  2A
01BD:  CALL   0A3
01BE:  DECFSZ 26,F
01BF:  GOTO   1BB
.................... 		output_bit(PIN_D2, 0); 
01C0:  BCF    08.2
01C1:  BSF    03.5
01C2:  BCF    08.2
.................... 		delay_us(2000); 
01C3:  MOVLW  02
01C4:  BCF    03.5
01C5:  MOVWF  26
01C6:  CALL   090
.................... 		i--; 
01C7:  DECF   25,F
.................... 		} 
01C8:  GOTO   1B2
.................... 	} 
....................  
.................... void long_delay_us(long int timing) 
.................... 	{ 
.................... 	int i=10; 
*
016B:  MOVLW  0A
016C:  MOVWF  29
.................... 	while (i--) 
.................... 		{ 
016D:  MOVF   29,W
016E:  DECF   29,F
016F:  XORLW  00
0170:  BTFSC  03.2
0171:  GOTO   176
.................... 		delay_us(timing); 
0172:  MOVF   27,W
0173:  MOVWF  2A
0174:  CALL   0A3
.................... 		} 
0175:  GOTO   16D
.................... 	} 
....................  
....................  
....................  
.................... signed long int scan_angle=0; //angle of IR servo 
*
0190:  CLRF   21
0191:  CLRF   22
.................... unsigned int target_distance=0; //distance away of target 
0192:  CLRF   23
.................... unsigned int distance_thresh=30; //acceptable target detection 
0193:  MOVLW  1E
0194:  MOVWF  24
....................  
....................  
.................... //sense 
.................... void scan() 
.................... 	{ 
.................... 	//swap scan directions 
.................... 	 
.................... 	/*psuedocode 
.................... 	while object is detected 
.................... 		scan left while object detected 
.................... 	while object not detected 
.................... 		scan right until object detected*/ 
.................... 	 
.................... 	target_distance = analog(A3);//check sensor 
*
012D:  MOVLW  03
012E:  MOVWF  25
012F:  CALL   0C9
0130:  MOVF   78,W
0131:  MOVWF  23
.................... 	 
.................... 	if (target_distance > distance_thresh)//object detected 
0132:  MOVF   23,W
0133:  SUBWF  24,W
0134:  BTFSC  03.0
0135:  GOTO   14A
.................... 		{ 
.................... 		if (scan_angle>-20) //overflow protection 
0136:  BTFSS  22.7
0137:  GOTO   143
0138:  MOVF   22,W
0139:  SUBLW  FE
013A:  BTFSC  03.0
013B:  GOTO   149
013C:  XORLW  FF
013D:  BTFSS  03.2
013E:  GOTO   143
013F:  MOVF   21,W
0140:  SUBLW  EC
0141:  BTFSC  03.0
0142:  GOTO   149
.................... 			scan_angle-=1;//scan left 
0143:  MOVLW  01
0144:  SUBWF  21,F
0145:  MOVLW  00
0146:  BTFSS  03.0
0147:  MOVLW  01
0148:  SUBWF  22,F
.................... 		} 
.................... 	else //object not detected 
0149:  GOTO   15C
.................... 		{ 
.................... 		if (scan_angle<130) //overflow protection 
014A:  BTFSC  22.7
014B:  GOTO   153
014C:  MOVF   22,F
014D:  BTFSS  03.2
014E:  GOTO   158
014F:  MOVF   21,W
0150:  SUBLW  81
0151:  BTFSS  03.0
0152:  GOTO   158
.................... 			scan_angle+=1; //scan right 
0153:  MOVLW  01
0154:  ADDWF  21,F
0155:  BTFSC  03.0
0156:  INCF   22,F
.................... 		else //if scanned all the way, this forces it to start over 
0157:  GOTO   15C
.................... 			scan_angle=-20; 
0158:  MOVLW  FF
0159:  MOVWF  22
015A:  MOVLW  EC
015B:  MOVWF  21
.................... 		} 
.................... 		 
.................... 	//servo scan code 
.................... 	output_bit(PIN_D2, 1);//139 center 
015C:  BSF    08.2
015D:  BSF    03.5
015E:  BCF    08.2
.................... 	long_delay_us(130+scan_angle); 
015F:  MOVLW  82
0160:  BCF    03.5
0161:  ADDWF  21,W
0162:  MOVWF  25
0163:  MOVF   22,W
0164:  MOVWF  26
0165:  BTFSC  03.0
0166:  INCF   26,F
0167:  MOVF   26,W
0168:  MOVWF  28
0169:  MOVF   25,W
016A:  MOVWF  27
.................... 	output_bit(PIN_D2, 0); 
*
0176:  BCF    08.2
0177:  BSF    03.5
0178:  BCF    08.2
.................... 		 
.................... 	//printf("angle: %ld distance: %u\r\n", scan_angle, target_distance);//debug code 
.................... 	} 
0179:  BCF    03.5
017A:  BCF    0A.3
017B:  BCF    0A.4
017C:  GOTO   219 (RETURN)
.................... 	 
....................  
.................... void main() { 
017D:  CLRF   04
017E:  MOVLW  1F
017F:  ANDWF  03,F
0180:  MOVLW  0A
0181:  BSF    03.5
0182:  MOVWF  19
0183:  MOVLW  26
0184:  MOVWF  18
0185:  MOVLW  90
0186:  BCF    03.5
0187:  MOVWF  18
0188:  BSF    03.5
0189:  BSF    1F.0
018A:  BSF    1F.1
018B:  BSF    1F.2
018C:  BCF    1F.3
....................  
.................... //initializing all Cerebellum routines 
.................... cereb_init(0); 
*
0195:  CLRF   25
.................... pwm_init(); 
*
01AC:  CALL   004
....................  
.................... //allow short capacitor charge up time 
.................... delay_us(5000); 
01AD:  MOVLW  05
01AE:  MOVWF  26
01AF:  CALL   090
....................  
.................... ScanLeft(); //reset IR scanner to straight 
....................  
.................... //system ready indicator, and start button 
.................... set_led(YELLOW, 1); 
*
01C9:  MOVLW  01
01CA:  MOVWF  25
01CB:  MOVWF  26
01CC:  CALL   0B2
.................... while(analog(A3) < 100) {printf("%u\r\n", analog(A3));}; //hand swipe to activate robot 
01CD:  MOVLW  03
01CE:  MOVWF  25
01CF:  CALL   0C9
01D0:  MOVF   78,W
01D1:  SUBLW  63
01D2:  BTFSS  03.0
01D3:  GOTO   1E6
01D4:  MOVLW  03
01D5:  MOVWF  25
01D6:  CALL   0C9
01D7:  MOVF   78,W
01D8:  MOVWF  25
01D9:  MOVWF  26
01DA:  MOVLW  1B
01DB:  MOVWF  27
01DC:  GOTO   0F3
01DD:  MOVLW  0D
01DE:  BTFSS  0C.4
01DF:  GOTO   1DE
01E0:  MOVWF  19
01E1:  MOVLW  0A
01E2:  BTFSS  0C.4
01E3:  GOTO   1E2
01E4:  MOVWF  19
01E5:  GOTO   1CD
.................... set_led(YELLOW, 0); 
01E6:  MOVLW  01
01E7:  MOVWF  25
01E8:  CLRF   26
01E9:  CALL   0B2
....................  
.................... servoReverse(); 
....................  
.................... while(1) 
.................... 	{ 
.................... 	delay_us(2500);//so it doesnt change states too fast //2500 works 
*
020E:  MOVLW  02
020F:  MOVWF  26
0210:  CALL   090
0211:  MOVLW  02
0212:  MOVWF  25
0213:  MOVLW  F9
0214:  MOVWF  2A
0215:  CALL   0A3
0216:  DECFSZ 25,F
0217:  GOTO   213
.................... 	 
.................... 	scan();//locate target 
0218:  GOTO   12D
.................... 	 
.................... 	 
.................... 	//movement actions 
.................... 	if (scan_angle > 85)//if target is too far on right 
0219:  BTFSC  22.7
021A:  GOTO   251
021B:  MOVF   22,F
021C:  BTFSS  03.2
021D:  GOTO   222
021E:  MOVF   21,W
021F:  SUBLW  55
0220:  BTFSC  03.0
0221:  GOTO   251
.................... 		{ 
.................... 		servoRight();//turn towards target 
.................... 		set_led(YELLOW, 0); 
*
0241:  MOVLW  01
0242:  BCF    03.5
0243:  MOVWF  25
0244:  CLRF   26
0245:  CALL   0B2
.................... 		set_led(GREEN, 1); 
0246:  CLRF   25
0247:  MOVLW  01
0248:  MOVWF  26
0249:  CALL   0B2
.................... 		scan_angle-=1;//scanner turns left while robot turns right 
024A:  MOVLW  01
024B:  SUBWF  21,F
024C:  MOVLW  00
024D:  BTFSS  03.0
024E:  MOVLW  01
024F:  SUBWF  22,F
.................... 		} 
.................... 	else if (scan_angle < 50)//if target is too far on left 
0250:  GOTO   2AF
0251:  BTFSC  22.7
0252:  GOTO   25A
0253:  MOVF   22,F
0254:  BTFSS  03.2
0255:  GOTO   28A
0256:  MOVF   21,W
0257:  SUBLW  31
0258:  BTFSS  03.0
0259:  GOTO   28A
.................... 		{ 
.................... 		servoLeft();//turn towards target 
.................... 		set_led(YELLOW, 1); 
*
027D:  MOVLW  01
027E:  BCF    03.5
027F:  MOVWF  25
0280:  MOVWF  26
0281:  CALL   0B2
.................... 		set_led(GREEN, 0); 
0282:  CLRF   25
0283:  CLRF   26
0284:  CALL   0B2
.................... 		scan_angle+=1;//scanner turns right while robot turns left 
0285:  MOVLW  01
0286:  ADDWF  21,F
0287:  BTFSC  03.0
0288:  INCF   22,F
.................... 		} 
.................... 	else //centered on target 
0289:  GOTO   2AF
.................... 		{ 
.................... 		servoForward();//drive straight 
.................... 		set_led(YELLOW, 1); 
*
02A6:  MOVLW  01
02A7:  BCF    03.5
02A8:  MOVWF  25
02A9:  MOVWF  26
02AA:  CALL   0B2
.................... 		set_led(GREEN, 1); 
02AB:  CLRF   25
02AC:  MOVLW  01
02AD:  MOVWF  26
02AE:  CALL   0B2
.................... 		} 
.................... 	} 
02AF:  GOTO   20E
.................... 	 
.................... while(1); 
02B0:  GOTO   2B0
.................... } 
....................  
.................... //thoughts, try reducing the 5000 delay, maybe doubling negative scan_angle, and reducing turning speed 
02B1:  SLEEP

Configuration Fuses:
   Word  1: 3FFA   HS NOWDT NOPUT NOPROTECT BROWNOUT LVP NOCPD NOWRT NODEBUG
